{
    "docs": [
        {
            "location": "/",
            "text": "Open Research Bases\n\u00b6\n\n\nThis is the future home of the \nOpen Research Bases\n \nGroup! We create template bases for the \nOpen Journals\n\norganization of journals to drive reproducible, automated research and software\ndevelopment.\n\n\nResources\n\u00b6\n\n\nThe following open source projects form the open bases:\n\n\n\n\nOpen Journals\n\n\nThe Experiment Factory\n\n\nLabJS\n\n\nJsPsych\n\n\nRobots\n\n\n\n\nTemplates\n\u00b6\n\n\n\n\nWhere are the bases?\n\n\n\n\nWe are putting together the first toy examples that will put together a selection of components from above\nto generate a fully reproducible generation to publication pipeline! Stay tuned.\n\n\nDevelopment\n\u00b6\n\n\nDocumentation is done with \nmkdocs\n because it's easy to write markdown files.\nIf you want to contribute, you can just change the content of the \nsrc\n folder.\nFor details on customization and using the theme, please see the \nmaterial\n theme pages.\n\n\nLocal\n\u00b6\n\n\nHere are the dependencies you should install:\n\n\npip install mkdocs mkdocs-material click-man\n\n\n\n\n\nThe resulting docs will be built from \nsrc\n into \ndocs\n. The build and serve happens\nlike this!\n\n\nmkdocs serve\n\n\n\n\n\nThen open your browser to \nhttp://127.0.0.1:8000\n\n\nDocker\n\u00b6\n\n\nIf you want, you can also develop in the container!\n\n\ndocker build -t openbases/openbases.github.io .\ndocker run --rm -v --port 8000:8000 $PWD/:/code openbases/openbases.github.io\n\n\n\n\n\nSupport\n\u00b6\n\n\nPlease don't hesitate to reach out and \n\nask us a question\n, \nor contribute!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$(function() {\n\n  var colors = [\n    'rgb(23, 86, 232)',\n    'brown',\n    'rgb(233, 171, 23)'\n  ];\n\n  var type = /(canvas|webgl)/.test(url.type) ? url.type : 'svg';\n  var two = new Two({\n    type: Two.Types[type],\n    fullscreen: true,\n    autostart: true\n  }).appendTo(document.body);\n\n  var background = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n  background.noStroke();\n  background.fill = 'transparent';\n  background.name = 'background';\n\n  var container = two.makeGroup(background);\n\n  var rows = Math.floor(two.height / 100);\n  var cols = Math.floor(two.width / 100);\n  var width = Math.round(two.height / Math.max(rows, cols));\n\n  for (var i = 0; i < rows; i++) {\n\n    var even = !!(i % 2);\n    var vi = i / (rows - 1);\n\n    for (var j = 0; j < cols; j++) {\n\n      var k = j;\n\n      if (even) {\n        k += 0.5;\n      if (j >=  cols - 1) {\n        continue;\n      }\n     }\n\n      var hi = k / (cols - 1);\n      var type = !!(j % 2) ? 'Squiggle' : 'Nonagon';\n      var height = !!(j % 2) ? width / 3 : width;\n      var shape = two['make' + type](90, 90, Math.floor(Math.random() * 3) + 3);\n      var color = colors[Math.floor(Math.random() * colors.length)];\n\n      shape.rotation = Math.floor(Math.random() * 4) * Math.PI / 2 + Math.PI / 4;\n      shape.translation.set(hi * two.width, vi * two.height);\n\n      if (j % 2) {\n       shape.noFill();\n       shape.stroke = color;\n       shape.linewidth = 10;\n       shape.cap = 'round';\n      } else {\n       shape.noStroke();\n       shape.fill = color;\n      }\n\n      shape.step = (Math.floor(Math.random() * 8) / 8) * Math.PI / 60;\n      shape.step *= Math.random() > 0.5 ? - 1 : 1;\n\n      container.add(shape);\n\n    }\n\n  }\n\n  var cursor = two.makeCircle(0, 0, Math.min(two.height, two.width) / 3);\n  cursor.outline = two.makeCircle(0, 0, Math.min(two.height, two.width) / 3);\n  cursor.target = new Two.Vector();\n\n  cursor.outline.noFill();\n  cursor.outline.stroke = 'rgba(0, 100, 255, 0.1)';\n  cursor.outline.linewidth = 40;\n\n  container.mask = cursor;\n  cursor.target.set(two.width / 2, two.height / 2);\n  cursor.translation.copy(cursor.target);\n\n  var center = _.debounce(function() {\n    cursor.target.set(two.width, two.height);\n  }, 1000);\n\n  var drag = function(e) {\n    cursor.target.set(e.clientX, e.clientY);\n    center();\n  };\n\n  var touchDrag = function(e) {\n    e.preventDefault();\n    var touch = e.originalEvent.changedTouches[0];\n    drag({\n      clientX: touch.pageX,\n      clientY: touch.pageY\n    });\n    return false;\n  };\n\n  $(window)\n    .bind('mousemove', drag)\n    .bind('touchmove', touchDrag);\n\n  two.bind('update', function() {\n    cursor.translation.x += (cursor.target.x - cursor.translation.x) * 0.125;\n    cursor.translation.y += (cursor.target.y - cursor.translation.y) * 0.125;\n    cursor.outline.translation.copy(cursor.translation);\n\n    for (var k in container.children) {\n      var child = container.children[k];\n      if (child.name === 'background') {\n        continue;\n      }\n      child.rotation += child.step;\n    }\n\n  });\n\n});\n\nTwo.prototype.makeSquiggle = function(width, height, phi) {\n\n  var amt = 64;\n\n  var squiggle = this.makeCurve(\n    _.map(_.range(amt), function(i) {\n      var pct = i / (amt - 1);\n      var theta = pct * Math.PI * 2 * phi + Math.PI / 2;\n      var x = width * pct - width / 2;\n      var y = height / 2 * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    }),\n    true\n  );\n\n  return squiggle;\n\n};\n\nTwo.prototype.makeNonagon = function(width, height, sides) {\n\n  width /= 2;\n  height /= 2;\n\n  var shape = this.makePath(\n    _.map(_.range(sides), function(i) {\n      var pct = i / sides;\n      var theta = Math.PI * 2 * pct - Math.PI / 2;\n      var x = width * Math.cos(theta);\n      var y = height * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    })\n  );\n\n  return shape;\n\n};\n\nTwo.prototype.makeTriangle = function(width, height, sides) {\n\n  width /= 2;\n  height /= 2;\n  sides /= 3;\n\n  var shape = this.makePath(\n    _.map(_.range(sides), function(i) {\n      var pct = i / sides;\n      var theta = Math.PI * 2 * pct - Math.PI / 2;\n      var x = width * Math.cos(theta);\n      var y = height * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    })\n  );\n\n  return shape;\n\n};\n\n\n\n\n\n$(document).ready(function(){\n  $(document).click(function(){\n    $($('svg')[4]).remove();\n    $('body').css('overflow', 'scroll');\n  })\n})",
            "title": "Home"
        },
        {
            "location": "/#open-research-bases",
            "text": "This is the future home of the  Open Research Bases  \nGroup! We create template bases for the  Open Journals \norganization of journals to drive reproducible, automated research and software\ndevelopment.",
            "title": "Open Research Bases"
        },
        {
            "location": "/#resources",
            "text": "The following open source projects form the open bases:   Open Journals  The Experiment Factory  LabJS  JsPsych  Robots",
            "title": "Resources"
        },
        {
            "location": "/#templates",
            "text": "Where are the bases?   We are putting together the first toy examples that will put together a selection of components from above\nto generate a fully reproducible generation to publication pipeline! Stay tuned.",
            "title": "Templates"
        },
        {
            "location": "/#development",
            "text": "Documentation is done with  mkdocs  because it's easy to write markdown files.\nIf you want to contribute, you can just change the content of the  src  folder.\nFor details on customization and using the theme, please see the  material  theme pages.",
            "title": "Development"
        },
        {
            "location": "/#local",
            "text": "Here are the dependencies you should install:  pip install mkdocs mkdocs-material click-man  The resulting docs will be built from  src  into  docs . The build and serve happens\nlike this!  mkdocs serve  Then open your browser to  http://127.0.0.1:8000",
            "title": "Local"
        },
        {
            "location": "/#docker",
            "text": "If you want, you can also develop in the container!  docker build -t openbases/openbases.github.io .\ndocker run --rm -v --port 8000:8000 $PWD/:/code openbases/openbases.github.io",
            "title": "Docker"
        },
        {
            "location": "/#support",
            "text": "Please don't hesitate to reach out and  ask us a question , \nor contribute!      \n\n$(function() {\n\n  var colors = [\n    'rgb(23, 86, 232)',\n    'brown',\n    'rgb(233, 171, 23)'\n  ];\n\n  var type = /(canvas|webgl)/.test(url.type) ? url.type : 'svg';\n  var two = new Two({\n    type: Two.Types[type],\n    fullscreen: true,\n    autostart: true\n  }).appendTo(document.body);\n\n  var background = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n  background.noStroke();\n  background.fill = 'transparent';\n  background.name = 'background';\n\n  var container = two.makeGroup(background);\n\n  var rows = Math.floor(two.height / 100);\n  var cols = Math.floor(two.width / 100);\n  var width = Math.round(two.height / Math.max(rows, cols));\n\n  for (var i = 0; i < rows; i++) {\n\n    var even = !!(i % 2);\n    var vi = i / (rows - 1);\n\n    for (var j = 0; j < cols; j++) {\n\n      var k = j;\n\n      if (even) {\n        k += 0.5;\n      if (j >=  cols - 1) {\n        continue;\n      }\n     }\n\n      var hi = k / (cols - 1);\n      var type = !!(j % 2) ? 'Squiggle' : 'Nonagon';\n      var height = !!(j % 2) ? width / 3 : width;\n      var shape = two['make' + type](90, 90, Math.floor(Math.random() * 3) + 3);\n      var color = colors[Math.floor(Math.random() * colors.length)];\n\n      shape.rotation = Math.floor(Math.random() * 4) * Math.PI / 2 + Math.PI / 4;\n      shape.translation.set(hi * two.width, vi * two.height);\n\n      if (j % 2) {\n       shape.noFill();\n       shape.stroke = color;\n       shape.linewidth = 10;\n       shape.cap = 'round';\n      } else {\n       shape.noStroke();\n       shape.fill = color;\n      }\n\n      shape.step = (Math.floor(Math.random() * 8) / 8) * Math.PI / 60;\n      shape.step *= Math.random() > 0.5 ? - 1 : 1;\n\n      container.add(shape);\n\n    }\n\n  }\n\n  var cursor = two.makeCircle(0, 0, Math.min(two.height, two.width) / 3);\n  cursor.outline = two.makeCircle(0, 0, Math.min(two.height, two.width) / 3);\n  cursor.target = new Two.Vector();\n\n  cursor.outline.noFill();\n  cursor.outline.stroke = 'rgba(0, 100, 255, 0.1)';\n  cursor.outline.linewidth = 40;\n\n  container.mask = cursor;\n  cursor.target.set(two.width / 2, two.height / 2);\n  cursor.translation.copy(cursor.target);\n\n  var center = _.debounce(function() {\n    cursor.target.set(two.width, two.height);\n  }, 1000);\n\n  var drag = function(e) {\n    cursor.target.set(e.clientX, e.clientY);\n    center();\n  };\n\n  var touchDrag = function(e) {\n    e.preventDefault();\n    var touch = e.originalEvent.changedTouches[0];\n    drag({\n      clientX: touch.pageX,\n      clientY: touch.pageY\n    });\n    return false;\n  };\n\n  $(window)\n    .bind('mousemove', drag)\n    .bind('touchmove', touchDrag);\n\n  two.bind('update', function() {\n    cursor.translation.x += (cursor.target.x - cursor.translation.x) * 0.125;\n    cursor.translation.y += (cursor.target.y - cursor.translation.y) * 0.125;\n    cursor.outline.translation.copy(cursor.translation);\n\n    for (var k in container.children) {\n      var child = container.children[k];\n      if (child.name === 'background') {\n        continue;\n      }\n      child.rotation += child.step;\n    }\n\n  });\n\n});\n\nTwo.prototype.makeSquiggle = function(width, height, phi) {\n\n  var amt = 64;\n\n  var squiggle = this.makeCurve(\n    _.map(_.range(amt), function(i) {\n      var pct = i / (amt - 1);\n      var theta = pct * Math.PI * 2 * phi + Math.PI / 2;\n      var x = width * pct - width / 2;\n      var y = height / 2 * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    }),\n    true\n  );\n\n  return squiggle;\n\n};\n\nTwo.prototype.makeNonagon = function(width, height, sides) {\n\n  width /= 2;\n  height /= 2;\n\n  var shape = this.makePath(\n    _.map(_.range(sides), function(i) {\n      var pct = i / sides;\n      var theta = Math.PI * 2 * pct - Math.PI / 2;\n      var x = width * Math.cos(theta);\n      var y = height * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    })\n  );\n\n  return shape;\n\n};\n\nTwo.prototype.makeTriangle = function(width, height, sides) {\n\n  width /= 2;\n  height /= 2;\n  sides /= 3;\n\n  var shape = this.makePath(\n    _.map(_.range(sides), function(i) {\n      var pct = i / sides;\n      var theta = Math.PI * 2 * pct - Math.PI / 2;\n      var x = width * Math.cos(theta);\n      var y = height * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    })\n  );\n\n  return shape;\n\n};  \n$(document).ready(function(){\n  $(document).click(function(){\n    $($('svg')[4]).remove();\n    $('body').css('overflow', 'scroll');\n  })\n})",
            "title": "Support"
        },
        {
            "location": "/bases/",
            "text": "Open Bases\n\u00b6\n\n\nAn open base template is a combination of components, including experiment\ntemplates, testing tools, and deployment options to produce a full development\nthrough publication reproducible workflow.\n\n\ndevelop --> version control --> build --> test --> deploy --> publish\n\n\n\n\n\nTemplates\n\u00b6\n\n\nEach of the following is a builder template, typically including all steps to\nhelp you with development through deployment and publication.\n\n\n\n\nLabjs Builder\n\n\nBuild your experiment with the LabJS builder interface, and export it into a Github \nrepository that is ready to be connected to CircleCI and Docker Hub to build, deploy, \nand publish your experiment in the Journal of Open Research Experiments.\n\n\n\n\n\n\nJsPsych Builder\n\n\nBuild your experiment with the JsPsych builder interface, and export it into a Github \nrepository that is ready to be connected to CircleCI and Docker Hub to build, deploy, \nand publish your experiment in the Journal of Open Research Experiments.\n\n\n\n\n\n\nExpfactory Builder\n\n\nStart with an experiment from the Experiment Factory Library, and add it to a Github\nrepository to connect to CircleCI and Docker Hub to build, deploy, \nand publish your experiment in the Journal of Open Research Experiments.\n\n\n\n\n\n\n\nComponents\n\u00b6\n\n\nExperiment Templates\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nRepository\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nLabJS\n\n\nFelixHenninger/lab.js\n\n\nlabjs.readthedocs.io\n\n\n\n\n\n\nJSPsych\n\n\njspsych/jsPsych\n\n\nhttps://www.jspsych.org/\n\n\n\n\n\n\nExperiment Factory Library\n\n\nhttps://expfactory.github.io/experiments\n\n\nhttps://expfactory.github.io/generate\n\n\n\n\n\n\nSurvey Builder\n\n\nexpfactory/survey-generator\n\n\nhttps://expfactory.github.io/integration-surveys\n\n\n\n\n\n\n\n\nRobots\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nRepository\n\n\nDescription\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nExpfactory Robots\n\n\nexpfactory/expfactory-robots\n\n\nAutomated web browser\n\n\nhttps://expfactory.github.io/integration-robots\n\n\n\n\n\n\nWhedon\n\n\nopenbases/whedon\n\n\nJosS Github Helper Robot\n\n\nhttps://www.github.com/openbases/whedon\n\n\n\n\n\n\nWhedon Python\n\n\n[openbases/whedon-python][https://www.github.com/openbases/whedon-python)\n\n\nHelper functions for Whedon\n\n\nhttps://openbases.github.io/whedon-python/\n\n\n\n\n\n\nWhedon Docker\n\n\nopenbases/whedon\n\n\nDockerized Whedon and Python Helpers\n\n\nhttps://www.github.com/openbases/whedon\n\n\n\n\n\n\n\n\nDocumentation\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nRepository\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOpen Bases Jekyll Theme\n\n\nopenbases/openbases-jekyll-theme\n\n\nA starter template for a \"docs\" folder for Github Pages\n\n\n\n\n\n\n\n\nReproducible Deployments and Data Archive\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nRepository\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nDocker Hub\n\n\n\n\n\n\n\n\n\n\nGithub Pages\n\n\n\n\n\n\n\n\n\n\nKaggle",
            "title": "Bases"
        },
        {
            "location": "/bases/#open-bases",
            "text": "An open base template is a combination of components, including experiment\ntemplates, testing tools, and deployment options to produce a full development\nthrough publication reproducible workflow.  develop --> version control --> build --> test --> deploy --> publish",
            "title": "Open Bases"
        },
        {
            "location": "/bases/#templates",
            "text": "Each of the following is a builder template, typically including all steps to\nhelp you with development through deployment and publication.   Labjs Builder  Build your experiment with the LabJS builder interface, and export it into a Github \nrepository that is ready to be connected to CircleCI and Docker Hub to build, deploy, \nand publish your experiment in the Journal of Open Research Experiments.    JsPsych Builder  Build your experiment with the JsPsych builder interface, and export it into a Github \nrepository that is ready to be connected to CircleCI and Docker Hub to build, deploy, \nand publish your experiment in the Journal of Open Research Experiments.    Expfactory Builder  Start with an experiment from the Experiment Factory Library, and add it to a Github\nrepository to connect to CircleCI and Docker Hub to build, deploy, \nand publish your experiment in the Journal of Open Research Experiments.",
            "title": "Templates"
        },
        {
            "location": "/bases/#components",
            "text": "",
            "title": "Components"
        },
        {
            "location": "/bases/#experiment-templates",
            "text": "Name  Repository  Documentation      LabJS  FelixHenninger/lab.js  labjs.readthedocs.io    JSPsych  jspsych/jsPsych  https://www.jspsych.org/    Experiment Factory Library  https://expfactory.github.io/experiments  https://expfactory.github.io/generate    Survey Builder  expfactory/survey-generator  https://expfactory.github.io/integration-surveys",
            "title": "Experiment Templates"
        },
        {
            "location": "/bases/#robots",
            "text": "Name  Repository  Description  Documentation      Expfactory Robots  expfactory/expfactory-robots  Automated web browser  https://expfactory.github.io/integration-robots    Whedon  openbases/whedon  JosS Github Helper Robot  https://www.github.com/openbases/whedon    Whedon Python  [openbases/whedon-python][https://www.github.com/openbases/whedon-python)  Helper functions for Whedon  https://openbases.github.io/whedon-python/    Whedon Docker  openbases/whedon  Dockerized Whedon and Python Helpers  https://www.github.com/openbases/whedon",
            "title": "Robots"
        },
        {
            "location": "/bases/#documentation",
            "text": "Name  Repository  Description      Open Bases Jekyll Theme  openbases/openbases-jekyll-theme  A starter template for a \"docs\" folder for Github Pages",
            "title": "Documentation"
        },
        {
            "location": "/bases/#reproducible-deployments-and-data-archive",
            "text": "Name  Repository  Documentation      Docker Hub      Github Pages      Kaggle",
            "title": "Reproducible Deployments and Data Archive"
        },
        {
            "location": "/about/",
            "text": "About\n\u00b6\n\n\nOpenBases is a collaboration between several open source projects that are geared toward \nmaking creation, testing, distribution, and publication of reproducible experiments \neasier.\n\n\nWhy would I want to use open bases?\n\u00b6\n\n\nThe open bases templates plug easily into the tools that you are already familiar with and\nusing (for example, Github) and guide you through traditionally challenging parts\nof practicing reproducible science. For example, it's common to implemenent these\ncomponents for your work, separately and assemble them for a final product:\n\n\n\n\ndevelopment\n of an experiment usually means learning a web-based technology, and writing code to run some protocol and collect data.\n\n\nbuild\n steps, in a modern sense, comes down to using a reproducible container to capture all software and library dependencies for your software.\n\n\nversion control\n is using a service like Github to ensure that you can both collaborate and keep a record of your work.\n\n\ntesting\n of your procedure is imperative, but not commonly done as it is an extra step\n\n\npublication\n means capturing all previous steps and methods into a product that is both human consumable and can replicate the work.\n\n\n\n\nInstead of needing to implement all of the above separately, the Open Bases \ngive you Github repos that are ready to go, with minimal additional work needed to\nsatisfy the same pipeline:\n\n\ndevelop --> \ntest\n --> build --> deploy --> publish\n\n\n\n\n\nThe bases are intended for researchers, academics, and software developers alike.\nAll templates are geared toward publication in the \nJournal of Open Research Software.\n\n\nJournal of Open Research Software\n\u00b6\n\n\nIf you are visiting this site, you are likely a \n(1) Researcher\n, \n(2) Academic\n, and/or \n(3) Software Developer\n.  Here are your stories:\n\n\n\n\nAs a Researcher, I want a place where I can go to find software for running commonly-used cognitive or behavioral paradigms on the web. I want this software to be tested, validated, and peer-reviewed.\n\n\nAs a Researcher, I want a place where I can go to find (anonymized) data from experiments that have been run with this software, so I can cross-validate / diagnose / troubleshoot when I use the software myself.\n\n\nAs a Software Developer, I want a place where I can publish new experiment software that I have created for researchers to use.\n\n\nAs an Academic, I want a place where I can publish (anonymized) data and results / analyses from studies to validate or norm new experiment software.\n\n\n\n\nYour Current Choices\n\u00b6\n\n\nYou are likely familiar with two kinds of places to publish software: \n\n\n(1) Traditional journals that review/publish research and theory papers.\n Embedded within these traditional-journal papers are methods sections that describe any software used, if applicable, and it is the rare savvy researcher who links/cites the software. But reproducing the software used in a traditional-journal experiment is often a massive undertaking of reverse-engineering with a lot of room for error. This is a problem for reproducibility, not to mention how much it may slow down scientific progress.\n\n\n(2) JOSS, the Journal of Open Source Software\n, reviews / publishes research software, with an exclusive focus on software to the exclusion of research / analyses. \n\n\nMissing is an option \n(3) A journal that reviews / publishes software for running qualitative / quantitative experiments\n, which reviews both the software and the research to test the software. (Think: Software for paradigms like the Stroop, N-Back, Flanker, IAT.)",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "OpenBases is a collaboration between several open source projects that are geared toward \nmaking creation, testing, distribution, and publication of reproducible experiments \neasier.",
            "title": "About"
        },
        {
            "location": "/about/#why-would-i-want-to-use-open-bases",
            "text": "The open bases templates plug easily into the tools that you are already familiar with and\nusing (for example, Github) and guide you through traditionally challenging parts\nof practicing reproducible science. For example, it's common to implemenent these\ncomponents for your work, separately and assemble them for a final product:   development  of an experiment usually means learning a web-based technology, and writing code to run some protocol and collect data.  build  steps, in a modern sense, comes down to using a reproducible container to capture all software and library dependencies for your software.  version control  is using a service like Github to ensure that you can both collaborate and keep a record of your work.  testing  of your procedure is imperative, but not commonly done as it is an extra step  publication  means capturing all previous steps and methods into a product that is both human consumable and can replicate the work.   Instead of needing to implement all of the above separately, the Open Bases \ngive you Github repos that are ready to go, with minimal additional work needed to\nsatisfy the same pipeline:  develop -->  test  --> build --> deploy --> publish  The bases are intended for researchers, academics, and software developers alike.\nAll templates are geared toward publication in the  Journal of Open Research Software.",
            "title": "Why would I want to use open bases?"
        },
        {
            "location": "/about/#journal-of-open-research-software",
            "text": "If you are visiting this site, you are likely a  (1) Researcher ,  (2) Academic , and/or  (3) Software Developer .  Here are your stories:   As a Researcher, I want a place where I can go to find software for running commonly-used cognitive or behavioral paradigms on the web. I want this software to be tested, validated, and peer-reviewed.  As a Researcher, I want a place where I can go to find (anonymized) data from experiments that have been run with this software, so I can cross-validate / diagnose / troubleshoot when I use the software myself.  As a Software Developer, I want a place where I can publish new experiment software that I have created for researchers to use.  As an Academic, I want a place where I can publish (anonymized) data and results / analyses from studies to validate or norm new experiment software.",
            "title": "Journal of Open Research Software"
        },
        {
            "location": "/about/#your-current-choices",
            "text": "You are likely familiar with two kinds of places to publish software:   (1) Traditional journals that review/publish research and theory papers.  Embedded within these traditional-journal papers are methods sections that describe any software used, if applicable, and it is the rare savvy researcher who links/cites the software. But reproducing the software used in a traditional-journal experiment is often a massive undertaking of reverse-engineering with a lot of room for error. This is a problem for reproducibility, not to mention how much it may slow down scientific progress.  (2) JOSS, the Journal of Open Source Software , reviews / publishes research software, with an exclusive focus on software to the exclusion of research / analyses.   Missing is an option  (3) A journal that reviews / publishes software for running qualitative / quantitative experiments , which reviews both the software and the research to test the software. (Think: Software for paradigms like the Stroop, N-Back, Flanker, IAT.)",
            "title": "Your Current Choices"
        }
    ]
}