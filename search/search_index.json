{
    "docs": [
        {
            "location": "/",
            "text": "Open Research Bases\n\u00b6\n\n\nThis is the future home of the \nOpen Research Bases\n \nGroup! We create template bases for the \nOpen Journals\n\norganization of journals to drive reproducible, automated research and software\ndevelopment.\n\n\nResources\n\u00b6\n\n\nThe following open source projects form the open bases:\n\n\n\n\nOpen Journals\n\n\nThe Experiment Factory\n\n\nLabJS\n\n\nJsPsych\n\n\nRobots\n\n\n\n\nTemplates\n\u00b6\n\n\n\n\nWhere are the bases?\n\n\n\n\nWe are putting together the first toy examples that will put together a selection of components from above\nto generate a fully reproducible generation to publication pipeline! Stay tuned.\n\n\nDevelopment\n\u00b6\n\n\nDocumentation is done with \nmkdocs\n because it's easy to write markdown files.\nIf you want to contribute, you can just change the content of the \nsrc\n folder.\nFor details on customization and using the theme, please see the \nmaterial\n theme pages.\n\n\nLocal\n\u00b6\n\n\nHere are the dependencies you should install:\n\n\npip install mkdocs mkdocs-material click-man\n\n\n\n\n\nThe resulting docs will be built from \nsrc\n into \ndocs\n. The build and serve happens\nlike this!\n\n\nmkdocs serve\n\n\n\n\n\nThen open your browser to \nhttp://127.0.0.1:8000\n\n\nDocker\n\u00b6\n\n\nIf you want, you can also develop in the container!\n\n\ndocker build -t openbases/openbases.github.io .\ndocker run --rm -v --port 8000:8000 $PWD/:/code openbases/openbases.github.io\n\n\n\n\n\nSupport\n\u00b6\n\n\nPlease don't hesitate to reach out and \n\nask us a question\n, \nor contribute!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$(function() {\n\n  var colors = [\n    'rgb(23, 86, 232)',\n    'brown',\n    'rgb(233, 171, 23)'\n  ];\n\n  var type = /(canvas|webgl)/.test(url.type) ? url.type : 'svg';\n  var two = new Two({\n    type: Two.Types[type],\n    fullscreen: true,\n    autostart: true\n  }).appendTo(document.body);\n\n  var background = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n  background.noStroke();\n  background.fill = 'transparent';\n  background.name = 'background';\n\n  var container = two.makeGroup(background);\n\n  var rows = Math.floor(two.height / 100);\n  var cols = Math.floor(two.width / 100);\n  var width = Math.round(two.height / Math.max(rows, cols));\n\n  for (var i = 0; i < rows; i++) {\n\n    var even = !!(i % 2);\n    var vi = i / (rows - 1);\n\n    for (var j = 0; j < cols; j++) {\n\n      var k = j;\n\n      if (even) {\n        k += 0.5;\n      if (j >=  cols - 1) {\n        continue;\n      }\n     }\n\n      var hi = k / (cols - 1);\n      var type = !!(j % 2) ? 'Squiggle' : 'Nonagon';\n      var height = !!(j % 2) ? width / 3 : width;\n      var shape = two['make' + type](90, 90, Math.floor(Math.random() * 3) + 3);\n      var color = colors[Math.floor(Math.random() * colors.length)];\n\n      shape.rotation = Math.floor(Math.random() * 4) * Math.PI / 2 + Math.PI / 4;\n      shape.translation.set(hi * two.width, vi * two.height);\n\n      if (j % 2) {\n       shape.noFill();\n       shape.stroke = color;\n       shape.linewidth = 10;\n       shape.cap = 'round';\n      } else {\n       shape.noStroke();\n       shape.fill = color;\n      }\n\n      shape.step = (Math.floor(Math.random() * 8) / 8) * Math.PI / 60;\n      shape.step *= Math.random() > 0.5 ? - 1 : 1;\n\n      container.add(shape);\n\n    }\n\n  }\n\n  var cursor = two.makeCircle(0, 0, Math.min(two.height, two.width) / 3);\n  cursor.outline = two.makeCircle(0, 0, Math.min(two.height, two.width) / 3);\n  cursor.target = new Two.Vector();\n\n  cursor.outline.noFill();\n  cursor.outline.stroke = 'rgba(0, 100, 255, 0.1)';\n  cursor.outline.linewidth = 40;\n\n  container.mask = cursor;\n  cursor.target.set(two.width / 2, two.height / 2);\n  cursor.translation.copy(cursor.target);\n\n  var center = _.debounce(function() {\n    cursor.target.set(two.width, two.height);\n  }, 1000);\n\n  var drag = function(e) {\n    cursor.target.set(e.clientX, e.clientY);\n    center();\n  };\n\n  var touchDrag = function(e) {\n    e.preventDefault();\n    var touch = e.originalEvent.changedTouches[0];\n    drag({\n      clientX: touch.pageX,\n      clientY: touch.pageY\n    });\n    return false;\n  };\n\n  $(window)\n    .bind('mousemove', drag)\n    .bind('touchmove', touchDrag);\n\n  two.bind('update', function() {\n    cursor.translation.x += (cursor.target.x - cursor.translation.x) * 0.125;\n    cursor.translation.y += (cursor.target.y - cursor.translation.y) * 0.125;\n    cursor.outline.translation.copy(cursor.translation);\n\n    for (var k in container.children) {\n      var child = container.children[k];\n      if (child.name === 'background') {\n        continue;\n      }\n      child.rotation += child.step;\n    }\n\n  });\n\n});\n\nTwo.prototype.makeSquiggle = function(width, height, phi) {\n\n  var amt = 64;\n\n  var squiggle = this.makeCurve(\n    _.map(_.range(amt), function(i) {\n      var pct = i / (amt - 1);\n      var theta = pct * Math.PI * 2 * phi + Math.PI / 2;\n      var x = width * pct - width / 2;\n      var y = height / 2 * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    }),\n    true\n  );\n\n  return squiggle;\n\n};\n\nTwo.prototype.makeNonagon = function(width, height, sides) {\n\n  width /= 2;\n  height /= 2;\n\n  var shape = this.makePath(\n    _.map(_.range(sides), function(i) {\n      var pct = i / sides;\n      var theta = Math.PI * 2 * pct - Math.PI / 2;\n      var x = width * Math.cos(theta);\n      var y = height * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    })\n  );\n\n  return shape;\n\n};\n\nTwo.prototype.makeTriangle = function(width, height, sides) {\n\n  width /= 2;\n  height /= 2;\n  sides /= 3;\n\n  var shape = this.makePath(\n    _.map(_.range(sides), function(i) {\n      var pct = i / sides;\n      var theta = Math.PI * 2 * pct - Math.PI / 2;\n      var x = width * Math.cos(theta);\n      var y = height * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    })\n  );\n\n  return shape;\n\n};\n\n\n\n\n\n$(document).ready(function(){\n  $(document).click(function(){\n    $($('svg')[4]).remove();\n    $('body').css('overflow', 'scroll');\n  })\n})",
            "title": "Home"
        },
        {
            "location": "/#open-research-bases",
            "text": "This is the future home of the  Open Research Bases  \nGroup! We create template bases for the  Open Journals \norganization of journals to drive reproducible, automated research and software\ndevelopment.",
            "title": "Open Research Bases"
        },
        {
            "location": "/#resources",
            "text": "The following open source projects form the open bases:   Open Journals  The Experiment Factory  LabJS  JsPsych  Robots",
            "title": "Resources"
        },
        {
            "location": "/#templates",
            "text": "Where are the bases?   We are putting together the first toy examples that will put together a selection of components from above\nto generate a fully reproducible generation to publication pipeline! Stay tuned.",
            "title": "Templates"
        },
        {
            "location": "/#development",
            "text": "Documentation is done with  mkdocs  because it's easy to write markdown files.\nIf you want to contribute, you can just change the content of the  src  folder.\nFor details on customization and using the theme, please see the  material  theme pages.",
            "title": "Development"
        },
        {
            "location": "/#local",
            "text": "Here are the dependencies you should install:  pip install mkdocs mkdocs-material click-man  The resulting docs will be built from  src  into  docs . The build and serve happens\nlike this!  mkdocs serve  Then open your browser to  http://127.0.0.1:8000",
            "title": "Local"
        },
        {
            "location": "/#docker",
            "text": "If you want, you can also develop in the container!  docker build -t openbases/openbases.github.io .\ndocker run --rm -v --port 8000:8000 $PWD/:/code openbases/openbases.github.io",
            "title": "Docker"
        },
        {
            "location": "/#support",
            "text": "Please don't hesitate to reach out and  ask us a question , \nor contribute!      \n\n$(function() {\n\n  var colors = [\n    'rgb(23, 86, 232)',\n    'brown',\n    'rgb(233, 171, 23)'\n  ];\n\n  var type = /(canvas|webgl)/.test(url.type) ? url.type : 'svg';\n  var two = new Two({\n    type: Two.Types[type],\n    fullscreen: true,\n    autostart: true\n  }).appendTo(document.body);\n\n  var background = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n  background.noStroke();\n  background.fill = 'transparent';\n  background.name = 'background';\n\n  var container = two.makeGroup(background);\n\n  var rows = Math.floor(two.height / 100);\n  var cols = Math.floor(two.width / 100);\n  var width = Math.round(two.height / Math.max(rows, cols));\n\n  for (var i = 0; i < rows; i++) {\n\n    var even = !!(i % 2);\n    var vi = i / (rows - 1);\n\n    for (var j = 0; j < cols; j++) {\n\n      var k = j;\n\n      if (even) {\n        k += 0.5;\n      if (j >=  cols - 1) {\n        continue;\n      }\n     }\n\n      var hi = k / (cols - 1);\n      var type = !!(j % 2) ? 'Squiggle' : 'Nonagon';\n      var height = !!(j % 2) ? width / 3 : width;\n      var shape = two['make' + type](90, 90, Math.floor(Math.random() * 3) + 3);\n      var color = colors[Math.floor(Math.random() * colors.length)];\n\n      shape.rotation = Math.floor(Math.random() * 4) * Math.PI / 2 + Math.PI / 4;\n      shape.translation.set(hi * two.width, vi * two.height);\n\n      if (j % 2) {\n       shape.noFill();\n       shape.stroke = color;\n       shape.linewidth = 10;\n       shape.cap = 'round';\n      } else {\n       shape.noStroke();\n       shape.fill = color;\n      }\n\n      shape.step = (Math.floor(Math.random() * 8) / 8) * Math.PI / 60;\n      shape.step *= Math.random() > 0.5 ? - 1 : 1;\n\n      container.add(shape);\n\n    }\n\n  }\n\n  var cursor = two.makeCircle(0, 0, Math.min(two.height, two.width) / 3);\n  cursor.outline = two.makeCircle(0, 0, Math.min(two.height, two.width) / 3);\n  cursor.target = new Two.Vector();\n\n  cursor.outline.noFill();\n  cursor.outline.stroke = 'rgba(0, 100, 255, 0.1)';\n  cursor.outline.linewidth = 40;\n\n  container.mask = cursor;\n  cursor.target.set(two.width / 2, two.height / 2);\n  cursor.translation.copy(cursor.target);\n\n  var center = _.debounce(function() {\n    cursor.target.set(two.width, two.height);\n  }, 1000);\n\n  var drag = function(e) {\n    cursor.target.set(e.clientX, e.clientY);\n    center();\n  };\n\n  var touchDrag = function(e) {\n    e.preventDefault();\n    var touch = e.originalEvent.changedTouches[0];\n    drag({\n      clientX: touch.pageX,\n      clientY: touch.pageY\n    });\n    return false;\n  };\n\n  $(window)\n    .bind('mousemove', drag)\n    .bind('touchmove', touchDrag);\n\n  two.bind('update', function() {\n    cursor.translation.x += (cursor.target.x - cursor.translation.x) * 0.125;\n    cursor.translation.y += (cursor.target.y - cursor.translation.y) * 0.125;\n    cursor.outline.translation.copy(cursor.translation);\n\n    for (var k in container.children) {\n      var child = container.children[k];\n      if (child.name === 'background') {\n        continue;\n      }\n      child.rotation += child.step;\n    }\n\n  });\n\n});\n\nTwo.prototype.makeSquiggle = function(width, height, phi) {\n\n  var amt = 64;\n\n  var squiggle = this.makeCurve(\n    _.map(_.range(amt), function(i) {\n      var pct = i / (amt - 1);\n      var theta = pct * Math.PI * 2 * phi + Math.PI / 2;\n      var x = width * pct - width / 2;\n      var y = height / 2 * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    }),\n    true\n  );\n\n  return squiggle;\n\n};\n\nTwo.prototype.makeNonagon = function(width, height, sides) {\n\n  width /= 2;\n  height /= 2;\n\n  var shape = this.makePath(\n    _.map(_.range(sides), function(i) {\n      var pct = i / sides;\n      var theta = Math.PI * 2 * pct - Math.PI / 2;\n      var x = width * Math.cos(theta);\n      var y = height * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    })\n  );\n\n  return shape;\n\n};\n\nTwo.prototype.makeTriangle = function(width, height, sides) {\n\n  width /= 2;\n  height /= 2;\n  sides /= 3;\n\n  var shape = this.makePath(\n    _.map(_.range(sides), function(i) {\n      var pct = i / sides;\n      var theta = Math.PI * 2 * pct - Math.PI / 2;\n      var x = width * Math.cos(theta);\n      var y = height * Math.sin(theta);\n      return new Two.Anchor(x, y);\n    })\n  );\n\n  return shape;\n\n};  \n$(document).ready(function(){\n  $(document).click(function(){\n    $($('svg')[4]).remove();\n    $('body').css('overflow', 'scroll');\n  })\n})",
            "title": "Support"
        },
        {
            "location": "/bases/",
            "text": "Open Bases\n\u00b6\n\n\nAn open base template is a combination of components, including experiment\ntemplates, testing tools, and deployment options to produce a partial or full \nreproducible workflow. A high level might look like this:\n\n\ndevelop --> version control --> build --> test --> deploy --> submission\n\n\n\n\n\nGiven that you have a contribution, meaning something you are developing like\nan experiment, and your goal is submission, coinciding with a set of\nsteps that get you from the start of your work to a tested, version controlled,\nreproducible submission, that's the job of the open bases. An open base can also\nbe as simple as \nsharing a rendered paper pdf\n \nin a Github repository programmatically, to \n\ncreating an API\n for a set of images.\nIt's just a Github repository template that you can fork and customize for your need.\n\n\n\n\nHow do I know what base to use?\n\n\nThe easiest thing to do is read the description of the base type, and then\nfollow the Github Link and look at the content in the repository and Github\nPages. If you think \"That's what I'd like to have for my repository!\" then\nyou've found a match, and can proceed following the instructions in the \nREADME.md provided by the repository.\n\n\n\n\nBase Types\n\u00b6\n\n\nThese base types can coincide with either a full template to achieve some goal, or a\ncomponent that is a step within. The groupings below are tags to describe what the base is or does,\nand you might see them as the prefix for Github repository names (e.g. \nexperiment-stroop\n)\nor as badges in a template repository to describe the content.\n\n\nSpecification\n\u00b6\n\n\n\"Specification\" refers to a language, ontology, or some other definition that might\nbe used in open science. A good example is a tool to work with, generate, or otherwise\ninteract with \nschema.org\n.\n\n\n\n\n\n\n\n\nName\n\n\nBadge\n\n\nRepository\n\n\nDescription\n\n\nPreview\n\n\n\n\n\n\n\n\n\n\nspec-template\n\n\n\n\nopenschemas/spec-template\n\n\neasily generate schema.org specification\n\n\nspec-container\n\n\n\n\n\n\n\n\n\n\n\nPaper\n\u00b6\n\n\n\"Paper\" refers to something like a PDF or other rendered content that might be \nused in a submission. Examples are PDFs, markdown content, or articles.\nEach of the following is a paper builder template, typically including steps to\ngenerate and serve a manuscript or similar. These bases might assist with\ngenerating a submission, but may not be intended for it. You will want to use one\nof these bases if you want a PDF to build from a Github repository, and then render\nbeautifully on Github Pages.\n\n\n\n\n\n\n\n\nName\n\n\nBadge\n\n\nRepository\n\n\nDescription\n\n\nPreview\n\n\n\n\n\n\n\n\n\n\nPaper Builder\n\n\n\n\nopenbases/builder-pdf\n\n\nGenerate PDF from markdown\n\n\ngh-pages\n\n\n\n\n\n\n\n\n\n\n\nSubmission\n\u00b6\n\n\nSubmission open bases typically consist of a set of steps (components) that get you from something you are developing to a programmatic paper submission. This might mean generating a container for your content, running an analysis, and then testing and submitting data and/or a manuscript.\n\n\n\n\n\n\n\n\nName\n\n\nBadge\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nJournal Open Source Software\n\n\n\n\nvalidate and preview your paper\n\n\n\n\n\n\n\n\n\n\n\nLibrary\n\u00b6\n\n\nrefers to software used within a base, such as LabJS or JSPsych for an experiment. These categories are shown here and used as tags, but aren't common to be found as openbases repositories. They are commonly other open source software.\n\n\n\n\n\n\n\n\nName\n\n\nBadge\n\n\nRepository\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLabJS\n\n\n\n\nFelixHenninger/lab.js\n\n\ngenerate experiments\n\n\n\n\n\n\nJSPsych\n\n\n\n\njspsych/jsPsych\n\n\ngenerate experiments\n\n\n\n\n\n\nExpfactory\n\n\n\n\nexpfactory/expfactory\n\n\ndeploy experiments\n\n\n\n\n\n\n\n\n\n\n\nExperiment\n\u00b6\n\n\n\"Experiment\" typically refers to a web based experiment, meaning some static content that can be dropped on a web server to collect data.\n\n\n\n\n\n\n\n\nName\n\n\nBadge\n\n\nRepository\n\n\n\n\n\n\n\n\n\n\nExperiment Factory Library\n\n\n\n\nexpfactory/experiments\n\n\n\n\n\n\nSurvey Generator\n\n\n\n\nexpfactory/survey-generator\n\n\n\n\n\n\n\n\n\n\n\nResources\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nBadge\n\n\nRepository\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIcons\n\n\n\n\nopenbases/openbases-icons\n\n\nstatic image API\n\n\n\n\n\n\n\n\nTesting\n\u00b6\n\n\nfunctions or software for continuous integration (or similar) testing purposes. For example, for experiments, we have robots to test static and runtime web-based experiments.\n\n\n\n\n\n\n\n\nName\n\n\nBadge\n\n\nRepository\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nExpfactory Robots\n\n\n\n\nexpfactory/expfactory-robots\n\n\nAutomated web browser\n\n\n\n\n\n\n\n\n\n\n\nOpenbases\n\u00b6\n\n\nA special base type for any kind of template that is for open bases developers. For examples, the \nopenbases-jekyll-theme\n can be easily dropped in a Github \"docs\" folder to render documentation for a new component repository, and \nbuilder-whedon\n is the builder for the actual \nopenbases/builder-whedon\n container to drive other components.\n\n\n\n\n\n\n\n\nName\n\n\nBadge\n\n\nRepository\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOpen Bases PDF Builder\n\n\n\n\nopenbases/openbases-pdf\n\n\nPDF Builder Base\n\n\n\n\n\n\nOpen Bases Python\n\n\n\n\nopenbases/openbases-python\n\n\nPython API for Open Bases\n\n\n\n\n\n\nOpen Bases Jekyll Theme\n\n\n\n\nopenbases/openbases-jekyll-theme\n\n\n\"docs\" folder for Github Pages\n\n\n\n\n\n\n\n\n\n\n\nData Archive\n\u00b6\n\n\nare components to help with archive of data.\n\n\n\n\n\n\n\n\nName\n\n\nRepository\n\n\nDocs\n\n\n\n\n\n\n\n\n\n\nDocker Hub\n\n\n\n\n\n\n\n\n\n\nGithub Pages\n\n\n\n\n\n\n\n\n\n\nKaggle",
            "title": "Bases"
        },
        {
            "location": "/bases/#open-bases",
            "text": "An open base template is a combination of components, including experiment\ntemplates, testing tools, and deployment options to produce a partial or full \nreproducible workflow. A high level might look like this:  develop --> version control --> build --> test --> deploy --> submission  Given that you have a contribution, meaning something you are developing like\nan experiment, and your goal is submission, coinciding with a set of\nsteps that get you from the start of your work to a tested, version controlled,\nreproducible submission, that's the job of the open bases. An open base can also\nbe as simple as  sharing a rendered paper pdf  \nin a Github repository programmatically, to  creating an API  for a set of images.\nIt's just a Github repository template that you can fork and customize for your need.   How do I know what base to use?  The easiest thing to do is read the description of the base type, and then\nfollow the Github Link and look at the content in the repository and Github\nPages. If you think \"That's what I'd like to have for my repository!\" then\nyou've found a match, and can proceed following the instructions in the \nREADME.md provided by the repository.",
            "title": "Open Bases"
        },
        {
            "location": "/bases/#base-types",
            "text": "These base types can coincide with either a full template to achieve some goal, or a\ncomponent that is a step within. The groupings below are tags to describe what the base is or does,\nand you might see them as the prefix for Github repository names (e.g.  experiment-stroop )\nor as badges in a template repository to describe the content.",
            "title": "Base Types"
        },
        {
            "location": "/bases/#specification",
            "text": "\"Specification\" refers to a language, ontology, or some other definition that might\nbe used in open science. A good example is a tool to work with, generate, or otherwise\ninteract with  schema.org .     Name  Badge  Repository  Description  Preview      spec-template   openschemas/spec-template  easily generate schema.org specification  spec-container",
            "title": "Specification"
        },
        {
            "location": "/bases/#paper",
            "text": "\"Paper\" refers to something like a PDF or other rendered content that might be \nused in a submission. Examples are PDFs, markdown content, or articles.\nEach of the following is a paper builder template, typically including steps to\ngenerate and serve a manuscript or similar. These bases might assist with\ngenerating a submission, but may not be intended for it. You will want to use one\nof these bases if you want a PDF to build from a Github repository, and then render\nbeautifully on Github Pages.     Name  Badge  Repository  Description  Preview      Paper Builder   openbases/builder-pdf  Generate PDF from markdown  gh-pages",
            "title": "Paper"
        },
        {
            "location": "/bases/#submission",
            "text": "Submission open bases typically consist of a set of steps (components) that get you from something you are developing to a programmatic paper submission. This might mean generating a container for your content, running an analysis, and then testing and submitting data and/or a manuscript.     Name  Badge  Description      Journal Open Source Software   validate and preview your paper",
            "title": "Submission"
        },
        {
            "location": "/bases/#library",
            "text": "refers to software used within a base, such as LabJS or JSPsych for an experiment. These categories are shown here and used as tags, but aren't common to be found as openbases repositories. They are commonly other open source software.     Name  Badge  Repository  Description      LabJS   FelixHenninger/lab.js  generate experiments    JSPsych   jspsych/jsPsych  generate experiments    Expfactory   expfactory/expfactory  deploy experiments",
            "title": "Library"
        },
        {
            "location": "/bases/#experiment",
            "text": "\"Experiment\" typically refers to a web based experiment, meaning some static content that can be dropped on a web server to collect data.     Name  Badge  Repository      Experiment Factory Library   expfactory/experiments    Survey Generator   expfactory/survey-generator",
            "title": "Experiment"
        },
        {
            "location": "/bases/#resources",
            "text": "Name  Badge  Repository  Description      Icons   openbases/openbases-icons  static image API",
            "title": "Resources"
        },
        {
            "location": "/bases/#testing",
            "text": "functions or software for continuous integration (or similar) testing purposes. For example, for experiments, we have robots to test static and runtime web-based experiments.     Name  Badge  Repository  Description      Expfactory Robots   expfactory/expfactory-robots  Automated web browser",
            "title": "Testing"
        },
        {
            "location": "/bases/#openbases",
            "text": "A special base type for any kind of template that is for open bases developers. For examples, the  openbases-jekyll-theme  can be easily dropped in a Github \"docs\" folder to render documentation for a new component repository, and  builder-whedon  is the builder for the actual  openbases/builder-whedon  container to drive other components.     Name  Badge  Repository  Description      Open Bases PDF Builder   openbases/openbases-pdf  PDF Builder Base    Open Bases Python   openbases/openbases-python  Python API for Open Bases    Open Bases Jekyll Theme   openbases/openbases-jekyll-theme  \"docs\" folder for Github Pages",
            "title": "Openbases"
        },
        {
            "location": "/bases/#data-archive",
            "text": "are components to help with archive of data.     Name  Repository  Docs      Docker Hub      Github Pages      Kaggle",
            "title": "Data Archive"
        },
        {
            "location": "/about/",
            "text": "About\n\u00b6\n\n\nOpenBases is a collaboration between several open source projects that are geared toward \nmaking creation, testing, distribution, and publication of reproducible experiments \neasier.\n\n\nWhy would I want to use open bases?\n\u00b6\n\n\nThe open bases templates plug easily into the tools that you are already familiar with and\nusing (for example, Github) and guide you through traditionally challenging parts\nof practicing reproducible science. For example, it's common to implemenent these\ncomponents for your work, separately and assemble them for a final product:\n\n\n\n\ndevelopment\n of an experiment usually means learning a web-based technology, and writing code to run some protocol and collect data.\n\n\nbuild\n steps, in a modern sense, comes down to using a reproducible container to capture all software and library dependencies for your software.\n\n\nversion control\n is using a service like Github to ensure that you can both collaborate and keep a record of your work.\n\n\ntesting\n of your procedure is imperative, but not commonly done as it is an extra step\n\n\npublication\n means capturing all previous steps and methods into a product that is both human consumable and can replicate the work.\n\n\n\n\nInstead of needing to implement all of the above separately, the Open Bases \ngive you Github repos that are ready to go, with minimal additional work needed to\nsatisfy the same pipeline:\n\n\ndevelop --> \ntest\n --> build --> deploy --> publish\n\n\n\n\n\nThe bases are intended for researchers, academics, and software developers alike.\nAll templates are geared toward publication in the \nJournal of Open Research Software.\n\n\nJournal of Open Research Experiments\n\u00b6\n\n\nIf you are visiting this site, you are likely a \n(1) Researcher\n, \n(2) Academic\n, and/or \n(3) Software Developer\n.  Here are your stories:\n\n\n\n\nAs a Researcher, I want a place where I can go to find software for running commonly-used cognitive or behavioral paradigms on the web. I want this software to be tested, validated, and peer-reviewed.\n\n\nAs a Researcher, I want a place where I can go to find (anonymized) data from experiments that have been run with this software, so I can cross-validate / diagnose / troubleshoot when I use the software myself.\n\n\nAs a Software Developer, I want a place where I can publish new experiment software that I have created for researchers to use.\n\n\nAs an Academic, I want a place where I can publish (anonymized) data and results / analyses from studies to validate or norm new experiment software.\n\n\n\n\nYour Current Choices\n\u00b6\n\n\nYou are likely familiar with two kinds of places to publish software: \n\n\n(1) Traditional journals that review/publish research and theory papers.\n Embedded within these traditional-journal papers are methods sections that describe any software used, if applicable, and it is the rare savvy researcher who links/cites the software. But reproducing the software used in a traditional-journal experiment is often a massive undertaking of reverse-engineering with a lot of room for error. This is a problem for reproducibility, not to mention how much it may slow down scientific progress.\n\n\n(2) JOSS, the Journal of Open Source Software\n, reviews / publishes research software, with an exclusive focus on software to the exclusion of research / analyses. \n\n\nMissing is an option \n(3) A journal that reviews / publishes software for running qualitative / quantitative experiments\n, which reviews both the software and the research to test the software. (Think: Software for paradigms like the Stroop, N-Back, Flanker, IAT.)",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "OpenBases is a collaboration between several open source projects that are geared toward \nmaking creation, testing, distribution, and publication of reproducible experiments \neasier.",
            "title": "About"
        },
        {
            "location": "/about/#why-would-i-want-to-use-open-bases",
            "text": "The open bases templates plug easily into the tools that you are already familiar with and\nusing (for example, Github) and guide you through traditionally challenging parts\nof practicing reproducible science. For example, it's common to implemenent these\ncomponents for your work, separately and assemble them for a final product:   development  of an experiment usually means learning a web-based technology, and writing code to run some protocol and collect data.  build  steps, in a modern sense, comes down to using a reproducible container to capture all software and library dependencies for your software.  version control  is using a service like Github to ensure that you can both collaborate and keep a record of your work.  testing  of your procedure is imperative, but not commonly done as it is an extra step  publication  means capturing all previous steps and methods into a product that is both human consumable and can replicate the work.   Instead of needing to implement all of the above separately, the Open Bases \ngive you Github repos that are ready to go, with minimal additional work needed to\nsatisfy the same pipeline:  develop -->  test  --> build --> deploy --> publish  The bases are intended for researchers, academics, and software developers alike.\nAll templates are geared toward publication in the  Journal of Open Research Software.",
            "title": "Why would I want to use open bases?"
        },
        {
            "location": "/about/#journal-of-open-research-experiments",
            "text": "If you are visiting this site, you are likely a  (1) Researcher ,  (2) Academic , and/or  (3) Software Developer .  Here are your stories:   As a Researcher, I want a place where I can go to find software for running commonly-used cognitive or behavioral paradigms on the web. I want this software to be tested, validated, and peer-reviewed.  As a Researcher, I want a place where I can go to find (anonymized) data from experiments that have been run with this software, so I can cross-validate / diagnose / troubleshoot when I use the software myself.  As a Software Developer, I want a place where I can publish new experiment software that I have created for researchers to use.  As an Academic, I want a place where I can publish (anonymized) data and results / analyses from studies to validate or norm new experiment software.",
            "title": "Journal of Open Research Experiments"
        },
        {
            "location": "/about/#your-current-choices",
            "text": "You are likely familiar with two kinds of places to publish software:   (1) Traditional journals that review/publish research and theory papers.  Embedded within these traditional-journal papers are methods sections that describe any software used, if applicable, and it is the rare savvy researcher who links/cites the software. But reproducing the software used in a traditional-journal experiment is often a massive undertaking of reverse-engineering with a lot of room for error. This is a problem for reproducibility, not to mention how much it may slow down scientific progress.  (2) JOSS, the Journal of Open Source Software , reviews / publishes research software, with an exclusive focus on software to the exclusion of research / analyses.   Missing is an option  (3) A journal that reviews / publishes software for running qualitative / quantitative experiments , which reviews both the software and the research to test the software. (Think: Software for paradigms like the Stroop, N-Back, Flanker, IAT.)",
            "title": "Your Current Choices"
        }
    ]
}